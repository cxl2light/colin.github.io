前言
  在一个人人都带手机的世界里，程序员必须能设计一个能流畅运行的并且提供良好的用户体验的应用。使用RxJava提供的响应式编程方式能帮你打破
android平台的限制，制作出惊艳的应用。
  这本书将是一个实践路程，从基本的响应式编程和观察者模式的概念到RxJava的主要特性，通过编码示例和实际的app来达到这个目的。
  我将展示如何从头开始创建一个Observalbe，或者从一个List，或者从一个我们代码库中一存在的方法。你会学会如何过滤一个Observable序列，
以便得到一个只包含我们想要的值的新序列；还有怎么将一个方法应用到Observable上，怎样将Observable整合和联系起来。我将展示给你如何通过
RxAndroid Scheduals来战胜Android中的多线程并发带来的困难。

这本书都有什么

第一章：Rx-从.Net到RxJava，初步进入响应式编程世界。我们将对比响应式编程和传统编程方法，了解他们的相同点和不同点。
第二章：为什么要Observables。对观察者模式做一个大概的了解，并了解RxJava是怎么扩展它的。以及Observable是什么，它是怎么和Iterables联系
起来的。
第三章：用我们前面学的来做一个叫  Hello Reactive World的安卓应用。
第四章：Filtering Observables，深入Observable序列的精华：filtering。我们来学习如何从正在发射内容的Observables中选择我们想要的值；如何
获取有限的值，如何处理值数量过多的情况，以及另外一些技巧。
第五章：Transforming Observables，展示如何按我们的需求来转换一个Observables序列。
第六章：Combining Observables，挖掘多种组合方法。我们将学到如何处理我们需要的并且同事存在的多个Observables。
第七章：Schedulers，解决android主线程导致的问题。向你展示如何用RxJava的调度器来处理多线程和并发编程问题。我们将用响应编程的思路创建
网络访问，存储访问和耗时任务。
第八章：REST in Pease-RxJava and Retrofit。将教会你如何通过squre公司的Retrofit和RxJava来创建一个既有效又高效的REST客户端。

这本书为谁而写

  如果你是一个有经验的JAVA程序员，响应式编程提供给你一种新的编程思路来使你的系统达到灵活和并发的，而不用去换另外一种编程语言。这本书将
帮助你学到RxJava的核心方面，同时帮你克服android平台的局限，创建事件驱动的，舒畅的响应快的android应用。

第一章 Rx-从.NET到RxJava

  响应式编程是一种建立在异步数据流概念上的编程思想。一个数据流就像一条河，可以被观测，被过滤，或者操作，还可以和另一条河合并形成一条新的
数据流。
  响应式编程的关键概念是事件。事件可以被等待，可以触发过程，还可以触发另一些事件。事件是唯一能将真实的世界映射到软件编程的正确方式：比如
如果感觉房里太热的话（事件发生了），我们会打开一扇窗；在表格中一些数据值变化的时候，我们希望那个计算总值的单元格的值同时也发生变化；我们
希望在我们的机器人快碰到墙时能拐弯。（reaction to events）
  对响应式编程最常见的一个场景是UI，我们的应用必须对网络访问，用户点击和系统提醒做出响应。在这个世界里，软件必须是事件驱动的，因为我们
真实世界就是事件驱动的。

微软Reactive扩展

  函数式编程使微软的一个计算机科学家Eric Meijer产生了灵感，使他开始着手设计和实现Rx库。
  Rx是.net的reactive扩展。Rx提供了一个简便的，事件驱动的编程方式，这个方式就是使用Observable序列。开发者可以使用Observables来产生异步数
据流模型，使用LINQ语法来查询，使用调度器管理并发。
  Rx使得一些熟知的概念，比如推送（push approach），更加容易实现。在响应世界中，我们不仅能等待一个网络请求或者数据查询结果，同时还能假装
用户不会关注到它或者抱怨它慢。即使我们等待一小会儿，我们也失去了做更多事，提供良好用户体验，将我们的软件从阻塞和顺序编程中解放出来的机会。
推送的方法逆转了这种情况：抛弃请求一个结果并等待的方法，而是仅仅请求一个结果，当结果可用时，获得结果可用的通知。开发者提供一个将要发生
的事件的响应序列。对每个事件，开发者提供一个响应；比如，用户提交用户名和密码表来请求登录。应用执行登录的网络请求，接下来会怎么样：
  显示一个登录成功信息并保存用户信息
  显示一个错误信息
如你所见，使用push的方法，开发者不需要等待结果。当结果到达时，他会被通知到。同时，他能做他想做的所有事情。
  显示一个登录框
  为将来的登录保存用户名和密码
  预加载一些登录成功时将会取得的信息
  
登录JAVA世界-Netflix RxJava

  2012年，在netflix公司，他们意识到现有的架构比较难适应用户的要求。他们决定重新设计程序架构以便减少网络REST请求。抛弃以往产生许多的请求
然后让客户端来处理他们需要的数据的做法，他们决定以客户端的需求为基准来做优化。
  为了达到这个目标，他们决定走向reactive，并把Rx从.NEt移植到jvm。他们不仅仅想移植到java，而是移植到JVM，这样就能给市场上运行于jvm上的语
言提供一个工具，比如java，groovy，scala这些语言。
  伴随着netflix技术博客上的一篇文章，Ben Christensen和Jafar Husain第一次向人们展示了RxJava。
  他们的关键点是：
  能简单的使用并发，以便更好的利用服务器的力量
  能简单执行异步操作
  逃脱回调地狱（callback hell）
  一条响应式编程道路
  对.net的pull方式的Iterable来说，RxJava Observable是等价的push方式。pull方式是阻塞与等待的；消费者从某些源拉取值，然后阻塞线程知道产生
  者提供了新的值。
  push的方式工作于订阅与响应的基础上：消费者向生产者订阅，当生产者有可用的值时，生产者向消费者推送这些值，并且通知消费者，然后消费者消费
  这些值。显然推送的方式更加灵活。因为从逻辑和实际的视角来说，程序员不管这些值来至于异步还是同步，他们的代码都能正常工作。
  
RxJava有什么不同

  从存粹的java视角来说，RxJava是从经典的GOF观察者模式继承而来。
  但它添加了以下经典观察者模式没有的能力：
  生产者能通过onComplete（）事件，通知消费者，现在没有数据了
  生产者能通过onError（）事件，通知消费者，出错了
  RxJava Observable可以不用嵌套调用，把程序员从回调地狱中拯救出来
  Observables和Iterables共享相同的API：许多我们能用在Iterables上的API，我们也能通知Observables上。但同时，因为Observables的流的自然性，
我们没有等价的Iterable。remove（）方法。
  从语义上来说，RxJava和.Net Rx一样。从语法上来说，netflix很小心的一直Rx的各个方法，保持java编程的约定和基本模式。
  
  总结
  
    在这章，我们初步踏入了reactive世界。我们了解了它的诞生，以及从Microsoft.Net到netflix的RxJava。我们学历它和以往经典的编程方法的相同
  和不同点。
    在下一章，我们要学习什么是Observables。怎么样创建它们，并把它们带到我们日常的编程生活中来。
    
  
